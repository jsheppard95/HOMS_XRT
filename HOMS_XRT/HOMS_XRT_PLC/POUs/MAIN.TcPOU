<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="Main" Id="{ea0bf136-bb68-48b6-99e0-4530d55408e2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
	tpImAPLC : TP := (PT:=T#10S);

	XRTM2PitchControl	    :	FB_PitchControl;
	//{attribute 'TcLinkTo' := 	'.Gantry.diEncCnt	:=	TIIB[M2-Y1 (Elmo Drive)]^Inputs^Position actual value'}
	XRTM2Y_GantryControl	:	FB_Gantry;
	XRTM2X_GantryControl	:	FB_Gantry;
	XRTM3PitchControl	    :	FB_PitchControl;
//	{attribute 'TcLinkTo' := 	'.Gantry.diEncCnt	:=	TIIB[M3-Y1 (Elmo Drive)]^Inputs^Position actual value'}
	XRTM3Y_GantryControl	:	FB_Gantry;
	XRTM3X_GantryControl	:	FB_Gantry;
	
	
	// Expert mode permits direct access to individual acutators.
	ExpertMode	:	BOOL := FALSE;
	PitchManualMode: BOOL := FALSE;
	
	//Limit switch evaluation blocks
	fbM2Y1LS	:	FB_LimitSwitchState;
	fbM2Y2LS	:	FB_LimitSwitchState;
	fbM2X1LS	:	FB_LimitSwitchState;
	fbM2X2LS	:	FB_LimitSwitchState;
	fbM2P1LS	:	FB_PitchSoftLimits;	
	
	fbM3Y1LS	:	FB_LimitSwitchState;
	fbM3Y2LS	:	FB_LimitSwitchState;
	fbM3X1LS	:	FB_LimitSwitchState;
	fbM3X2LS	:	FB_LimitSwitchState;
	fbM3P1LS	:	FB_PitchSoftLimits;	
	
	//Drive CoE Fb
	fbY1CoE	:	FB_ElmoGDCBellCoE;
	fbY2CoE	:	FB_ElmoGDCBellCoE;
	
	fbX1CoE	:	FB_ElmoGDCBellCoE;
	fbX2CoE	:	FB_ElmoGDCBellCoE;
	
	fbP1CoE	:	FB_ElmoGDCBellCoE;
	fbB1CoE	:	FB_ElmoGDCBellCoE;
	
	
	//Init params trigger
	rtInitParams	:	R_TRIG;
	
	//Test Parameters
		rStepSize: REAL;
	SettleTime: TON := (
	PT:=T#2s);
	TestUpperVoltage: REAL := 100;
	TestLowerVoltage: REAL := 10;
	xRunPiezoRepeatTest: BOOL;
	
	//Drive reference initializations
	fbInitDriveRef	:	FB_InitDriveRefs;
	//MPS Information
	fbMPS_States :  FB_MPS_STATES;
	M2_INRANGE  :   ARRAY[0..1] OF DINT := [24568920, 26568920];
	M2_OUTRANGE  :  ARRAY[0..1] OF DINT := [43568250, 50570250];
	//noConsequence	:	BOOL;
	
	mcBenderPower	:	MC_POWER;
	
	// Logging
	fbLogHandler : FB_LogHandler;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//System IO
/////////////////////////////
p_ModbusRx_OutputCoils();
p_ModbusRx_PLCMemory();


//InitParams
////////////////////
rtInitParams(CLK:=gFirstPass);
IF rtInitParams.Q THEN
	Init_XRTM2();
	Init_XRTM3();
	gFirstPass := FALSE;
END_IF

//System Error Handling
/////////////////////////////////////
//SystemErrorSummary(); //Check this action for a summary of all system faults
					  
//SystemError();

//Driver Parameter Verification
/////////////////////////////////////

//Gantry Interlock Logic
/////////////////////////////////////
	//SimGantry.VAxis.i_xMotorInterlock := TRUE;
	//SimGantry.PAxis.i_xMotorInterlock := TRUE;
	//SimGantry.SAxis.i_xMotorInterlock := TRUE;

LimitSwitchIO();
	
// Pitch control
/////////////////////////////////////
XRTM2PitchControl(Pitch:=HOMS2_Pitch, DirectPiezoMode:=(ExpertMode AND PitchManualMode), q_xDone=>HOMS2_Pitch.Axis.bDone, q_xBusy => HOMS2_Pitch.Axis.bBusy);
XRTM3PitchControl(Pitch:=HOMS3_Pitch, DirectPiezoMode:=(ExpertMode AND PitchManualMode), q_xDone=>HOMS3_Pitch.Axis.bDone, q_xBusy => HOMS3_Pitch.Axis.bBusy);

//Y motion
/////////////////////////////////////
XRTM2Y_GantryControl(Gantry:=HOMS2_YGantry);
XRTM3Y_GantryControl(Gantry:=HOMS3_YGantry);

HOMS3_YGantry.PAxis.stAxis.ReadStatus();
HOMS3_YGantry.SAxis.stAxis.ReadStatus();
HOMS3_YGantry.PAxis.stStatus.rActPosition := LREAL_TO_REAL(HOMS3_YGantry.PAxis.stAxis.NcToPlc.ActPos);
HOMS3_YGantry.SAxis.stStatus.rActPosition := LREAL_TO_REAL(HOMS3_YGantry.SAxis.stAxis.NcToPlc.ActPos);
	
//X Motion
/////////////////////////////////////
XRTM2X_GantryControl(Gantry:=HOMS2_XGantry);
XRTM3X_GantryControl(Gantry:=HOMS3_XGantry);

//Communicate state to MPS
////////////////////////////////
fbMPS_States(GANTRY:=HOMS2_XGantry,
			 OUT_LS:=NOT HOMS2_XGantry.PAxis.xHiLS OR NOT HOMS2_XGantry.SAxis.xLoLS,
			 IN_RANGE:=M2_INRANGE,
			 OUT_RANGE:=M2_OUTRANGE);
			 
bXRT_M2_IN  := fbMPS_States.IN;
bXRT_M2_OUT := fbMPS_States.OUT;

//EPICS Tx Update
////////////////////
p_ModbusTx_InputCoils();
//p_ModbusTx_OutputCoils();
p_ModbusTx_InputReg();
p_ModbusTx_PLCMemory();

//PMPS
PRG_CoatingProtection();

// Logging
fbLogHandler();]]></ST>
    </Implementation>
    <Action Name="Init_XRTM2" Id="{5f4f0886-bfe6-466e-ab0f-beab0308d09d}">
      <Implementation>
        <ST><![CDATA[//FEE-M2
///////////////////////////


//Initialize ELMO Drive references
fbInitDriveRef(stCoE:=HOMS2_XGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS2_XGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS2_YGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS2_YGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS2_Pitch.Stepper.stCoE);

//Initialze Drive Speeds and Accelerations
//////////////////////////////////////////
HOMS2_XGantry.PAxis.fAcceleration := 1.0;
HOMS2_XGantry.SAxis.fAcceleration := 1.0;
HOMS2_YGantry.PAxis.fAcceleration := 1.0;
HOMS2_YGantry.SAxis.fAcceleration := 1.0;

HOMS2_XGantry.PAxis.fDeceleration := 1.0;
HOMS2_XGantry.SAxis.fDeceleration := 1.0;
HOMS2_YGantry.PAxis.fDeceleration := 1.0;
HOMS2_YGantry.SAxis.fDeceleration := 1.0;

HOMS2_XGantry.PAxis.fVelocity := 0.1;
HOMS2_XGantry.SAxis.fVelocity := 0.1;
HOMS2_YGantry.PAxis.fVelocity := 0.1;
HOMS2_YGantry.SAxis.fVelocity := 0.1;

HOMS2_Pitch.Stepper.fAcceleration := 39;
HOMS2_Pitch.Stepper.fDeceleration := 39;
HOMS2_Pitch.Stepper.fVelocity     := 100;

//Initialize Piezo Driver
/////////////////////////////////////
HOMS2_Pitch.Piezo.stPIParams.fKp := 0.001;
HOMS2_Pitch.Piezo.stPIParams.tTn := T#500MS;
HOMS2_Pitch.Piezo.stPIParams.fOutMaxLimit := 1;
HOMS2_Pitch.Piezo.stPIParams.fOutMinLimit := -1;

// Initialize deadband settings
HOMS2_Pitch.Stepper.rStepperDmovRange := 3;
HOMS2_Pitch.Piezo.rPiezoDmovRange := 0.5;



	


]]></ST>
      </Implementation>
    </Action>
    <Action Name="Init_XRTM3" Id="{4cd8bf74-eac1-478e-83ee-065628004dc5}">
      <Implementation>
        <ST><![CDATA[//FEE-M3
///////////////////////////


//Initialize ELMO Drive references
fbInitDriveRef(stCoE:=HOMS3_XGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS3_XGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS3_YGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS3_YGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS3_Pitch.Stepper.stCoE);

//Initialze Drive Speeds and Accelerations
//////////////////////////////////////////
HOMS3_XGantry.PAxis.fAcceleration := 1.0;
HOMS3_XGantry.SAxis.fAcceleration := 1.0;
HOMS3_YGantry.PAxis.fAcceleration := 1.0;
HOMS3_YGantry.SAxis.fAcceleration := 1.0;

HOMS3_XGantry.PAxis.fDeceleration := 1.0;
HOMS3_XGantry.SAxis.fDeceleration := 1.0;
HOMS3_YGantry.PAxis.fDeceleration := 1.0;
HOMS3_YGantry.SAxis.fDeceleration := 1.0;

HOMS3_XGantry.PAxis.fVelocity := 0.1;
HOMS3_XGantry.SAxis.fVelocity := 0.1;
HOMS3_YGantry.PAxis.fVelocity := 0.1;
HOMS3_YGantry.SAxis.fVelocity := 0.1;

HOMS3_Pitch.Stepper.fAcceleration := 39;
HOMS3_Pitch.Stepper.fDeceleration := 39;
HOMS3_Pitch.Stepper.fVelocity     := 100;

//Initialize Piezo Driver
/////////////////////////////////////
HOMS3_Pitch.Piezo.stPIParams.fKp := 0.001;
HOMS3_Pitch.Piezo.stPIParams.tTn := T#500MS;
HOMS3_Pitch.Piezo.stPIParams.fOutMaxLimit := 1;
HOMS3_Pitch.Piezo.stPIParams.fOutMinLimit := -1;

// Initialize deadband settings
HOMS3_Pitch.Stepper.rStepperDmovRange := 20;
HOMS3_Pitch.Piezo.rPiezoDmovRange := 0.5;]]></ST>
      </Implementation>
    </Action>
    <Action Name="LimitSwitchIO" Id="{f9e468fa-ee02-4f8a-956e-139b70621257}">
      <Implementation>
        <ST><![CDATA[//XRT M2
//////////////////////////
fbM2Y1LS(diInputs:=HOMS2_YGantry.PAxis.diInputs, 
xHiLS=>HOMS2_YGantry.PAxis.xHiLS,
xLoLS=>HOMS2_YGantry.PAxis.xLoLS,
STO => gM2STO);

fbM2Y2LS(diInputs:=HOMS2_YGantry.SAxis.diInputs, 
xHiLS=>HOMS2_YGantry.SAxis.xHiLS,
xLoLS=>HOMS2_YGantry.SAxis.xLoLS);

fbM2X1LS(diInputs:=HOMS2_XGantry.PAxis.diInputs, 
xHiLS=>HOMS2_XGantry.PAxis.xHiLS,
xLoLS=>HOMS2_XGantry.PAxis.xLoLS);

fbM2X2LS(diInputs:=HOMS2_XGantry.SAxis.diInputs, 
xHiLS=>HOMS2_XGantry.SAxis.xHiLS,
xLoLS=>HOMS2_XGantry.SAxis.xLoLS);

fbM2P1LS(Pitch:=HOMS2_Pitch,
xHiLS=>HOMS2_Pitch.Stepper.xHiLS,
xLoLS=>HOMS2_Pitch.Stepper.xLoLS);

//XRT M3
//////////////////////////
fbM3Y1LS(diInputs:=HOMS3_YGantry.PAxis.diInputs, 
xHiLS=>HOMS3_YGantry.PAxis.xHiLS,
xLoLS=>HOMS3_YGantry.PAxis.xLoLS,
STO => gM3STO);

fbM3Y2LS(diInputs:=HOMS3_YGantry.SAxis.diInputs, 
xHiLS=>HOMS3_YGantry.SAxis.xHiLS,
xLoLS=>HOMS3_YGantry.SAxis.xLoLS);

fbM3X1LS(diInputs:=HOMS3_XGantry.PAxis.diInputs, 
xHiLS=>HOMS3_XGantry.PAxis.xHiLS,
xLoLS=>HOMS3_XGantry.PAxis.xLoLS);
(*
fbM3X2LS(diInputs:=HOMS3_XGantry.PAxis.diInputs,  //Paxis is here on purpose <HACK>
xHiLS=>HOMS3_XGantry.SAxis.xHiLS,
xLoLS=>HOMS3_XGantry.SAxis.xLoLS);
*)
fbM3X2LS(diInputs:=HOMS3_XGantry.SAxis.diInputs,  // Switching to SAxis works as expected, reason for <HACK> unclear
xHiLS=>HOMS3_XGantry.SAxis.xHiLS,
xLoLS=>HOMS3_XGantry.SAxis.xLoLS);

fbM3P1LS(Pitch:=HOMS3_Pitch,
xHiLS=>HOMS3_Pitch.Stepper.xHiLS,
xLoLS=>HOMS3_Pitch.Stepper.xLoLS);

]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>